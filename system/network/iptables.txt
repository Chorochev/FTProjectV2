################################################################################
man iptables
man iptables-extensions

################################################################################
## OPTIONS     
## COMMANDS - commands start with a capital letter
## PARAMETERS - commands start with a small letter

################################################################################
## chains: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING

################################################################################
## TABLES:
## [-t, --table table] This option specifies the packet matching table 
##                     which the command should operate on. 
## filter:   This is the !!!DEFAULT!!! table. 
##           'sudo iptables --table filter -vnL' == 'sudo iptables -vnL'
##           Chains: [INPUT, FORWARD, OUTPUT].
## nat:      This table is consulted when a packet that creates a new 
##           connection is encountered. 
##           Chains: [PREROUTING, INPUT, OUTPUT, POSTROUTING].
## mangle:   This  table  is  used  for specialized packet alteration.
##           Chains: [PREROUTING, OUTPUT, INPUT, FORWARD, POSTROUTING].
## raw:      This  table is used mainly for configuring exemptions from 
##           connection tracking in combination with the NOTRACK target. 
##           Chains: [PREROUT, ING, OUTPUT].
## security: This  table  is used for Mandatory Access Control (MAC) networking rules:
##           Chains: [INPUT, OUT, PUT, FORWARD].

################################################################################
## COMMANDS:
## -A, --append - set rule for the selected chain.
## --state 
#### NEW — All packages establishing a new connection.
#### ESTABLISHED — All packages belonging to the established connection.
#### RELATED — Packages that do not belong to the established connection.
#### INVALID — Bab packages.
## links: https://skeletor.org.ua/?p=1719
##        https://losst.ru/prosmotr-pravil-iptables
##        https://www.opennet.ru/docs/RUS/iptables/
##        https://www.opennet.ru/man.shtml?topic=iptables

## -P, --policy chain target
####    Set  the  policy  for the built-in (non-user-defined) chain to the given target.  
####    The policy target must be either ACCEPT or DROP.

##  -X, --delete-chain [chain]
$ sudo iptables -X
$ sudo iptables -X -t nat
$ sudo iptables -X -t mangle

## -F, --flush [chain]
## Clear all rules
$ sudo iptables -F
$ sudo iptables -F -t nat
$ sudo iptables -F -t mangle

################################################################################
## PARAMETERS:

## -m, --match match
####    Specifies a match to use, that is, an extension module that tests for 
####    a specific property. The set of matches make up  the condition under 
####    which a target is invoked. Matches are evaluated first to last as 
####    specified on the command line and work in short-circuit fashion, i.e. 
####    if one extension yields false, evaluation will stop.

## -j, --jump - TARGETS (iptables-extensions(8).  
## This specifies the target of the rule; i.e., what to do if the packet matches it.
#### ACCEPT means to let the packet through. 
#### DROP means to drop the packet on the floor. 
#### RETURN means stop traversing this chain and resume at the next rule in the 
####        previous (calling) chain. If the end of a built-in chain is reached 
####        or a rule in a built-in chain with target RETURN is matched, the target 
####        specified by the chain policy determines the fate of the packet. 

## [!] -i, --in-interface name
####    Name of an interface via which a packet was received (only for packets 
####    entering the INPUT,  FORWARD  and  PREROUTING  chains).
####    When the "!" argument is used before the interface name, the sense is inverted.
## [!] -o, --out-interface name
####    Name of an interface via which a packet is going to be sent (for packets 
####    entering the FORWARD, OUTPUT and POSTROUTING chains).
####    When the "!" argument is used before the interface name, the sense is inverted.  

## [!] -p, --protocol protocol
####    The protocol of the rule or of the packet to check.  The specified protocol 
####    can be one of tcp, udp, udplite, icmp, icmpv6, esp, ah, sctp, mh or 
####    the special keyword "all", or it can be a numeric value, representing one 
####    of these protocols  or  a  different one.
####    A "!" argument before the address specification inverts the sense of the address.

## [!] --destination-port,--dport port[:port]
## [!] --destination-ports,--dports port[,port|,port:port]...
####    Destination port or port range specification.
#### samples: --dport 22
####          --dport 22:80 - range from 22 to 80.
####          --dports 22,80

## [!] --source-port,--sport port[:port]
## [!] --source-ports,--sports port[,port|,port:port]...


## --state state
####    Where state is a comma separated list of the connection states to match. 
####    Only a subset of the states unterstood by "conntrack" are recognized: 
####    INVALID, ESTABLISHED, NEW, RELATED or UNTRACKED.


################################################################################
################################################################################
## struct of iptables' command
$ iptables -t "table" "action" "chain" "additional_parameters" 

## clear all rules 
$ sudo iptables -F

################################################################################
## Activate these new rules from file:
$ sudo sudo iptables-restore < *file*
## And see the difference:
$ sudo iptables -L
$ sudo iptables -vnL

################################################################################
## turn on FORWARD *) it won't work after reboot.
$ echo 1 > /proc/sys/net/ipv4/ip_forward
# Turn on forwarding packets for IPv4
sudo sysctl -w net.ipv4.ip_forward=1

## for work after reboot
## set net.ipv4.ip_forward=1 in file "/etc/sysctl.conf"
$ nano /etc/sysctl.conf
$ sudo sysctl -p /etc/sysctl.conf

## Save rules to file
$ sudo iptables-save > iptables_rules_temp.ipv4

################################################################################
## for working firewall after reboot 
## needs create file "/etc/network/if-pre-up.d/firewall" and gives permissions for run.
$ cp /home/sshalex/iptables/firewall /etc/network/if-pre-up.d/firewall
$ chmod +x /etc/network/if-pre-up.d/firewall

## DatabaseFT
$ cp /home/sshalex/firewall/DatabaseFT_Firewall.sh /etc/network/if-pre-up.d/firewall
$ chmod +x /etc/network/if-pre-up.d/firewall

## RouterFT
$ cp /home/sshalex/iptables/RouterFT_Firewall.sh /etc/network/if-pre-up.d/firewall
$ chmod +x /etc/network/if-pre-up.d/firewall

## WebFT
$ cp /home/sshalex/iptables/WebFT_Firewall.sh /etc/network/if-pre-up.d/firewall
$ chmod +x /etc/network/if-pre-up.d/firewall

################################################################################
## Log for firewall
## creating file
$ nano /etc/rsyslog.d/iptables.conf
## add:
:msg, contains, "IPTables-Dropped: " -/var/log/iptables.log
& ~

## creating log
$ touch /var/log/iptables.log
## adding permissions
$ chmod 600 /var/log/iptables.log

## restart
$ sudo service rsyslog restart
## OR
$ /etc/init.d/rsyslog restart
